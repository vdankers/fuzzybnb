listing[1:2,2]
listing[1:5,2]
listing[1:5,]
listing[1:5,2]
colnames(listing)
colnames(listing[,2])
colnames(listing)[2]
source('~/fuzzybnb/learn.R', chdir = TRUE)
plotthis <- c()#
i <- 1#
while (i < 200) {#
  plotthis[i] <- length(which(abs(res.test-data.targets)>i))/length(data.targets)#
  i <- i + 1#
}#
plot(plotthis, xlab="error in amount of euros", ylab="percentage of data set with error higher than x")
(abs(res.test-data.targets)/data.targets)[1:5]
plot(which(abs(res.test-data.targets)/data.targets<0.2)/length(data.targets))
which(abs(res.test-data.targets)/data.targets<0.2)/length(data.targets)
length(which(abs(res.test-data.targets)/data.targets<0.2))/length(data.targets)
nums <- seq[0,0.6,0.01]
nums <- seq[0,1,0.01]
nums <- seq[0,100,1]
nums <- seq(0,0.6,0.01)
for (num in nums) {plotthis <- c(plotthis, length(which(abs(res.test-data.targets)/data.targets<0.2))/length(data.targets)) }
plotthis <- c()
for (num in nums) {plotthis <- c(plotthis, length(which(abs(res.test-data.targets)/data.targets<0.2))/length(data.targets)) }
plot(plotthis)
plotthis
for (num in nums) {plotthis <- c(plotthis, length(which(abs(res.test-data.targets)/data.targets<num))/length(data.targets)) }
plot(plotthis)
plotthis <- c()
for (num in nums) {plotthis <- c(plotthis, length(which(abs(res.test-data.targets)/data.targets<num))/length(data.targets)) }
plot(plotthis)
plotthis
plotthis <- c()
for (num in nums) {plotthis <- c(plotthis, c(length(which(abs(res.test-data.targets)/data.targets<num))/length(data.targets)),num) }
plot(plotthis)
plotthis
source('~/fuzzybnb/learn.R', chdir = TRUE)
plot(data.targets, col="red", ylab="prices", xlab="index")#
points(res.test)
plot(data.targets, col="red", ylab="prices", xlab="index")
plot(data.targets, col="red", ylab="prices", xlab="index")#
points(res.test)
source('~/fuzzybnb/learn.R', chdir = TRUE)
plot(data.targets, col="red", ylab="prices", xlab="index")#
points(res.test)
source('~/fuzzybnb/learn.R', chdir = TRUE)
plot(data.targets, col="red", ylab="prices", xlab="index")#
points(res.test)
source('~/fuzzybnb/learn.R', chdir = TRUE)
source('~/fuzzybnb/learn.R', chdir = TRUE)
source('~/fuzzybnb/learn.R', chdir = TRUE)
source('~/fuzzybnb/learn.R', chdir = TRUE)
plot(data.targets, col="red", ylab="prices", xlab="index")#
points(res.test)
source('~/fuzzybnb/learn.R', chdir = TRUE)
plot(data.targets, col="red", ylab="prices", xlab="index")#
points(res.test)
control
nrow(listing)
plotthis <- c()#
while (i < 1) {#
  plotthis[i] <- length(which(abs(res.test-data.targets)>i))/length(data.targets)#
  i <- i + 0.05#
}
plotthis <- c()#
i <- 0#
while (i < 1) {#
  plotthis[i] <- length(which(abs(res.test-data.targets)>i))/length(data.targets)#
  i <- i + 0.05#
}
plot(plotthis, xlab="error in amount of euros", ylab="percentage of data set with error higher than x")
plot(plotthis, xlab="error in amount of euros", ylab="percentage of data set with error higher than x")
plotthis
plot(plotthis, xlab="error in amount of euros", ylab="percentage of data set with error higher than x")
nums <- seq(0,0.6,0.01)#
plotthis <- c()#
for (num in nums) {plotthis <- c(plotthis, length(which(abs(res.test-data.targets)/data.targets<num))/length(data.targets)) }
plot(plotthis, xlab="error in amount of euros", ylab="percentage of data set with error higher than x")
nums <- seq(0,1,0.01)#
plotthis <- c()#
for (num in nums) {plotthis <- c(plotthis, length(which(abs(res.test-data.targets)/data.targets<num))/length(data.targets)) }#
plot(plotthis,ylab="Percentage of the data which is off by x percent", "Percentage by which the price is off" )
nums <- seq(0,1,0.01)#
plotthis <- c()#
for (num in nums) {plotthis <- c(plotthis, length(which(abs(res.test-data.targets)/data.targets<num))/length(data.targets)) }#
plot(plotthis,ylab="Percentage of the data which is off by x percent", xlab="Percentage by which the price is off" )
plotthis[60]
plotthis[20]
plot(data.targets, col="red", ylab="prices", xlab="index")#
points(res.test)
error
nums <- seq(0,1,0.01)#
plotthis <- c()#
for (num in nums) {plotthis <- c(plotthis, length(which(abs(res.test-data.targets)/data.targets<num))/length(data.targets)) }#
plot(plotthis,ylab="Percentage of the data which is off by x percent", xlab="Percentage by which the price is off" )
plotthis[20]
plotthis[40]
plotthis[60]
plot(data.targets, col="red", ylab="prices", xlab="index")#
points(res.test)
control
error
nrow(listing)
nums <- seq(0,1,0.01)#
plotthis <- c()#
for (num in nums) {plotthis <- c(plotthis, length(which(abs(res.test-data.targets)/data.targets<num))/length(data.targets)) }#
plot(plotthis,ylab="Percentage of the data which is off by x percent", xlab="Percentage by which the price is off" )
plot(data.targets, col="red", ylab="prices", xlab="index")#
points(res.test)
plot(data.targets, col="red", ylab="prices", xlab="index")#
points(res.test)
error
nums <- seq(0,1,0.01)#
plotthis <- c()#
for (num in nums) {plotthis <- c(plotthis, length(which(abs(res.test-data.targets)/data.targets<num))/length(data.targets)) }#
plot(plotthis,ylab="Percentage of the data which is off by x percent", xlab="Percentage by which the price is off" )
plotthis[20]
plotthis[30]
plotthis[40]
nrow(listing)
control
source('~/fuzzybnb/learn.R', chdir = TRUE)
source('~/fuzzybnb/learn.R', chdir = TRUE)
listing <- read.csv("train_features.csv")
setwd('~/fuzzybnb/')
setwd('~/fuzzybnb/')
listing <- read.csv("train_features.csv")
nrow(listing)
listing[1:5,]
listing <- read.csv("train_features.csv")
listing[1:5,2:ncol(listing)]
source('~/fuzzybnb/learn.R', chdir = TRUE)
source('~/fuzzybnb/learn.R', chdir = TRUE)
source('~/fuzzybnb/learn.R', chdir = TRUE)
source('~/fuzzybnb/learn.R', chdir = TRUE)
source('~/fuzzybnb/learn.R', chdir = TRUE)
source('~/fuzzybnb/learn.R', chdir = TRUE)
control
plot(res.test)
plot(res.test)
source('~/fuzzybnb/learn.R', chdir = TRUE)
plot(data.targets, col="red", ylab="prices", xlab="index")#
points(res.test)
plot(data.targets, col="red", ylab="prices", xlab="index")#
points(res.test)
plot(res.test)
plot(data.targets)
data.targets
plot(data.targets)
plot(res.test)
plot(data.targets[,2], col="red", ylab="prices", xlab="index")#
points(res.test)
data.targetds[,2]
data.targets[,2]
data.targets[,1]
plot(data.targets[,1], col="red", ylab="prices", xlab="index")#
points(res.test)
error = sum(abs(res.test - data.targets))/length(data.targets[,1])
error
control
method.type
source('~/fuzzybnb/learn.R', chdir = TRUE)
source('~/fuzzybnb/learn.R', chdir = TRUE)
source('~/fuzzybnb/learn.R', chdir = TRUE)
plot(data.targets[,1], col="red", ylab="prices", xlab="index")#
points(res.test)
plot(data.targets[,1], col="red", ylab="prices", xlab="index")#
points(res.test)
error
error = sum(abs(data.targets-res.test))/length(data.targets)#
print(error)
data.targets
prices
source('~/fuzzybnb/Rlearn/learn.R', chdir = TRUE)
source('~/fuzzybnb/Rlearn/learn.R', chdir = TRUE)
data.targets
ncol(data.targets)
data.targets[1:5,]
data.targets[,1]
source('~/fuzzybnb/Rlearn/learn.R', chdir = TRUE)
data.train[1:5,]
data.test[1:5,]
prices[1:5,]
ncol(prices)
error = sum(abs(data.targets-res.test))/length(data.targets)#
print(error)
error = sum(abs(data.targets[,1]-res.test))/length(data.targets)#
print(error)
error = sum(abs(data.targets[,1]-res.test))/length(data.targets[,1])#
print(error)
data.targets
data.targets[1:5]
data.targets[1:5,]
error = sum(abs(data.targets-res.test))/length(data.targets)
error
abs(data.targets-res.test)
abs(data.targets-res.test)/length(data.targets)
matrix(data.targets)
nla <- matrix(data.targets)
bla
nla
nla <- matrix(c(data.targets))
nla
error = sum(abs(data.targets[,1]-res.test)[,1])/length(data.targets[,1])#
print(error)
nrow(abs(data.targets-res.test))
data.targets[,1]
data.targets <- data.targets[,1]
data.targets
source('~/fuzzybnb/Rlearn/learn.R', chdir = TRUE)
source('~/fuzzybnb/Rlearn/learn.R', chdir = TRUE)
library(frbs)
data.train <- read.csv("../train_features.csv", header=TRUE)#
prices <- read.csv("../train_prices.csv", header=FALSE)#
prices <- prices[,1]#
data.train <- cbind(data.train[,2:ncol(data.train)],prices)#
#
data.test <- read.csv("../test_features.csv", header=TRUE)#
data.test <- data.test[, 2:ncol(data.test)]#
data.targets <- read.csv("../train_prices.csv", header=FALSE)#
data.targets <- data.targets[,1]#
#
# get range of inputs#
range.data <- matrix(apply(rbind(data.train,cbind(data.test,data.targets)), 2, range), nrow=2)
data.train <- read.csv("../train_features.csv", header=TRUE)#
prices <- read.csv("../train_prices.csv", header=FALSE)#
prices <- prices[,1]#
data.train <- cbind(data.train[,2:ncol(data.train)],prices)#
#
data.test <- read.csv("../test_features.csv", header=TRUE)#
data.test <- data.test[, 2:ncol(data.test)]#
data.targets <- read.csv("../train_prices.csv", header=FALSE)#
data.targets <- data.targets[,1]#
#
# get range of inputs#
range.data <- matrix(apply(rbind(data.train,cbind(data.test,data.targets)), 2, range), nrow=2)
data.train <- read.csv("../train_features.csv", header=TRUE)#
prices <- read.csv("../train_prices.csv", header=FALSE)#
prices <- prices[,1]#
data.train <- cbind(data.train[,2:ncol(data.train)],prices)#
#
data.test <- read.csv("../test_features.csv", header=TRUE)#
data.test <- data.test[, 2:ncol(data.test)]#
data.targets <- read.csv("../train_prices.csv", header=FALSE)#
data.targets <- data.targets[,1]#
#
# get range of inputs#
range.data <- matrix(apply(rbind(data.train,cbind(data.test,data.targets)), 2, range), nrow=2)
setwd('~/fuzzybnb/Rlearn')
data.train <- read.csv("../train_features.csv", header=TRUE)#
prices <- read.csv("../train_prices.csv", header=FALSE)#
prices <- prices[,1]#
data.train <- cbind(data.train[,2:ncol(data.train)],prices)#
#
data.test <- read.csv("../test_features.csv", header=TRUE)#
data.test <- data.test[, 2:ncol(data.test)]#
data.targets <- read.csv("../train_prices.csv", header=FALSE)#
data.targets <- data.targets[,1]#
#
# get range of inputs#
range.data <- matrix(apply(rbind(data.train,cbind(data.test,data.targets)), 2, range), nrow=2)
cbind(data.test,data.targets)
bla <- cbind(data.test,data.targets)
bla[1:5,]
data.train[1:5,]
range.data <- matrix(apply(rbind(data.train,rename(cbind(data.test,data.targets),"data.targets"="prices")), 2, range), nrow=2)
range.data <- matrix(apply(rbind(data.train,rename(cbind(data.test,data.targets),c("data.targets"="prices"))), 2, range), nrow=2)
library(plyr)
bla <- cbind(data.test,data.targets)
colnames(bla)[-1] <- "prices"
colnames(bla)
# read data and remove id columns#
data.train <- read.csv("../train_features.csv", header=TRUE)#
prices <- read.csv("/../train_prices.csv", header=FALSE)#
prices <- prices[,1]#
data.train <- cbind(data.train[,2:ncol(data.train)],prices)#
#
data.test <- read.csv("../test_features.csv", header=TRUE)#
data.test <- data.test[, 2:ncol(data.test)]#
data.targets <- read.csv("../train_prices.csv", header=FALSE)#
data.targets <- data.targets[,1]
setwd('~/fuzzybnb/RLearn/')
library(frbs)
data.train <- read.csv("../train_features.csv", header=TRUE)
prices <- read.csv("../train_prices.csv", header=FALSE)
prices <- prices[,1]
data.train <- cbind(data.train[,2:ncol(data.train)],prices)
data.test <- read.csv("../test_features.csv", header=TRUE)#
data.test <- data.test[, 2:ncol(data.test)]#
data.targets <- read.csv("../train_prices.csv", header=FALSE)#
data.targets <- data.targets[,1]
colnames(combinedtest)[ncol(combinedtest)] <- "prices"
combinedtest <- cbind(data.test,data.targets)#
colnames(combinedtest)[ncol(combinedtest)] <- "prices"
colnames(combinedtest)
range.data <- matrix(apply(rbind(data.train,combinedtest), 2, range), nrow=2)
source("learnWM.R")
res.test <- predict(object.reg, data.test)
error = sum(abs(data.targets-res.test))/length(data.targets)
nrow(data.targets)
data.targets
length(data.targets)
nrow(res.test)
error = sum(abs(data.targets-res.test))/length(data.targets)
source("learnWM.R")
source("learn.R")
sum(abs(data.targets-res.test))/length(data.targets)
plotMF(object.reg)
par(mar=c(1,1,1,1))
plotMF(object.reg)
plotthis <- c()#
i <- 0#
while (i < 1) {#
  plotthis[i] <- length(which(abs(res.test-data.targets)>i))/length(data.targets)#
  i <- i + 0.05#
}
plot(plotthis, xlab="error in amount of euros", ylab="percentage of data set with error higher than x")
plotthis[1:5,]
plotthis[1:5]
length(which(abs(res.test-data.targets)>i))
length(data.targets)
length(which(abs(res.test-data.targets)>i))/length(data.targets)
plotthis
plotthis <- c()#
i <- 0#
while (i < 1) {#
  plotthis[i] <- length(which(abs(res.test-data.targets)>i))/length(data.targets)#
  i <- i + 0.05#
}
plotthis
which(abs(res.test-data.targets)>i))
which(abs(res.test-data.targets)>i)
which(abs(res.test-data.targets)>20)
plotthis <- c()#
i <- 0#
while (i < 1) {#
  plotthis[i] <- length(which(abs(res.test-data.targets)>i))/length(data.targets)#
  i <- i + 0.05#
}
plotthis <- c()#
i <- 0#
while (i < 1) {#
  plotthis[i] <- length(which(abs(res.test-data.targets)>i))/length(data.targets)#
  print(plotthis[i])#
  i <- i + 0.05#
}
length(which(abs(res.test-data.targets)>0.2))/length(data.targets)
length(which(abs(res.test-data.targets)>0.8))/length(data.targets)
length(which(abs(res.test-data.targets)>20))/length(data.targets)
plotthis <- c()#
i <- 5#
while (i < 1) {#
  plotthis[i] <- length(which(abs(res.test-data.targets)>i))/length(data.targets)#
  print(plotthis[i])#
  i <- i + 5#
}#
plot(plotthis, xlab="error in amount of euros", ylab="percentage of data set with error higher than x")
plotthis <- c()#
i <- 5#
while (i < 1) {#
  plotthis[i] <- length(which(abs(res.test-data.targets)>i))/length(data.targets)#
  print(plotthis[i])#
  i <- i + 5#
}
plotthis
length(which(abs(res.test-data.targets)>20))/length(data.targets)
length(which(abs(res.test-data.targets)>20))
length(which(abs(res.test-data.targets)<20))
length(which(abs(res.test-data.targets)<300))
plotthis <- c()#
i <- 5#
while (i < 600) {#
  plotthis[i] <- length(which(abs(res.test-data.targets)>i))/length(data.targets)#
  print(plotthis[i])#
  i <- i + 5#
}#
plot(plotthis, xlab="error in amount of euros", ylab="percentage of data set with error higher than x")
plotthis <- c()#
i <- 5#
while (i < 600) {#
  plotthis[i] <- length(which(abs(res.test-data.targets)>i))/length(data.targets)#
  print(plotthis[i])#
  i <- i + 5#
}#
plot(plotthis, xlab="error in amount of euros", ylab="percentage of data set with error higher than x")
plotthis <- c()#
i <- 5#
while (i < 300) {#
  plotthis[i] <- length(which(abs(res.test-data.targets)>i))/length(data.targets)#
  i <- i + 5#
}#
plot(plotthis, xlab="error in amount of euros", ylab="percentage of data set with error higher than x")
plotthis <- c()#
i <- 5#
while (i < 300) {#
  plotthis[i] <- length(which(abs(res.test-data.targets)>i))/length(data.targets)#
  i <- i + 5#
}#
plot(plotthis, xlab="error in amount of euros", ylab="percentage of data set with error higher than x")
plot(data.targets, col="red", ylab="prices", xlab="index")#
points(res.test)
nums <- seq(0,1,0.01)#
plotthis <- c()#
for (num in nums) {plotthis <- c(plotthis, length(which(abs(res.test-data.targets)/data.targets<num))/length(data.targets)) }#
plot(plotthis,ylab="Percentage of the data which is off by x percent", xlab="Percentage by which the price is off" )
source("learn.R")
source("learn.R")
source("learn.R")
data.train[1:5,]
source("learn.R")
source("learn.R")
source("learn.R")
plot(data.targets)
plot(data.targets)
points(res.test, col="red")
plot(data.targets)
points(res.test, col="red")
plotthis <- c()#
i <- 5#
while (i < 300) {#
  plotthis[i] <- length(which(abs(res.test-data.targets)<i))/length(data.targets)#
  i <- i + 5#
}#
plot(plotthis, xlab="error in amount of euros", ylab="percentage of data set with error x or less")
plotthis <- c()#
i <- 5#
while (i < 100) {#
  plotthis[i] <- length(which(abs(res.test-data.targets)<i))/length(data.targets)#
  i <- i + 5#
}#
plot(plotthis, xlab="error in amount of euros", ylab="percentage of data set with error x or less")
plotthis <- c()#
i <- 5#
while (i < 100) {#
  plotthis[i] <- length(which(abs(res.test-data.targets)<i))/length(data.targets)#
  i <- i + 5#
}#
plot(plotthis, xlab="error in amount of euros", ylab="percentage of data set with error x or less")
nums <- seq(0,1,0.01)#
plotthis <- c()#
for (num in nums) {plotthis <- c(plotthis, length(which(abs(res.test-data.targets)/data.targets<num))/length(data.targets)) }#
plot(plotthis,ylab="Percentage of the data which is off by x percent or less", xlab="Percentage by which the price is off" )
source("learn.R")
